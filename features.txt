= ABBREVIATIONS
rm  Rakudo/master
rn  Rakudo/nom
n   Niecza 

= Basics
Basic control structures: rm+, rn+, n+
Lexical variables: rm+, rn+, n+
Basic types (strings, numbers): rm+, rn+, n+
Basic file IO: rm+, rn+, n+
Basic OO: rm+, rn+, n+
Basic regex support: rm+, rn+, n+
Subroutines: rm+, rn+, n+
Blocks: rm+, rn+, n+

= Classes
Classes, attributes, methods: rm+, rn+, n+
Single inheritance: rm+, rn+, n+
Multiple inheritance: rm+, rn+- (attributes don't work with MI), n+
Read-only accessors: rm+, rn+, n+
Read-write accessors: rm+, rn+, n+
Default constructor: rm+ rn+ n+
Natively typed attributes: rm- rn+

= Roles
Roles with attributes and methods: rm+, rn+, n+
Composing roles into classes: rm+, rn+
Composing roles into roles: rm+, rn+
Parametric roles: rm+

= Regexes
Quantifiers, alternations: rm+ rn+ n+
Match objects: rm+ rn+ n+
Named and positional captures: rm+ rn+ n+
Conjunction: rm- rn-
Longest-Token Matching: rm+- (only for constants) rn- n+
Character classes: rm+- (no backlash escapes) rn-
Embedded code blocks: rm+ rn-
Variable interpolation: rm+- (only scalars) rn-
Grammars: rm+ rn-

= Signatures
Positional args/params: rm+ rn+ n+
Named args/params: rm+ rn+ n+
Slurpy args/params: rm+ rn+ n+
Multi-dimensional params: rm- rn+ n-
Nested signatures: rm+ rn-
is rw, is copy: rm+ rn+
Argument coercion: rm+ rn- n-
Type captures: rm+ rn+ n-

= Built-in types and functions
Strings, split, join, case folding, substr: rm+ rn+ n+
Basic numbers, arithmethic operations: rm+ rn+ n+
Big integers: rm- rn- n+
Complex numbers: rm+ rn+ n+
Rat type: rm+  rn+ n+
Hashes, Pairs: rm+ rn+ n+
Lists, arrays, map, grep: rm+ rn+ n+
Lazy lists: rm+ rn+ n+
LoL: rm- rn+-
Ranges: rm+ rn+
Sets, KeySet, KeyBag, ...: rn-
Buf: rm+ rn-

= Multi dispatch
Multi method dispatch: rm+ rn+ n+
Multi sub dispatch: rm+ rn+ n+
Protos: rm+- (outdated specification) rn+
Based on arity: rm+ rn+ n+
Based on types: rm+ rn+ n+
Proper narrowness analysis: rm+ rn+
Additional constraints: rm+

= Module management
use: rm+- (limited import lists) rn+-(limited import lists)
need:
require:
Basic module versioning: rm+ rn-

= Meta operators
Reduction: rm+ rn+ n+
Assignment: rm+ rn+ n+
Negation: rm+ rn+ n+
Reverse: rm+ rn+ n+
Zip: rm+- (only two lists) rn+ n+
Cross: rm+- (only two lists) rn+ n+
Hyper: rm+ rn-

= Syntax flexibility
Overloading operators: rm+ n+
Defining new operators: rm+ n+
Precedence and associativity of new operators: rm- rn- n+
Basic macros: rm- rn-
Hygienic macros: rm- rn- n-

= Concurrency
Basic threads: rm- rn- n+
Synchronization: rm- rn- n+-
Parallelized hyper operators: rm- rn-

= Misc
Junctions, autothreading: rm+ rn+ n+
Whatever-currying: rm+ rn+- n+
REPL: rm+ rn+ n+

= Meta-Object Programming
Introspection: rm+ rn+-
Adding methods: rm+ rn+
Inheritance manipulation:
Role composition:
