= ABBREVIATIONS
rm  Rakudo/master
rn  Rakudo/nom
n   Niecza 

= Basics
Basic control structures: rm+ rn+ n+
Lexical variables: rm+ rn+ n+
Basic types (strings, numbers): rm+ rn+ n+
Basic file IO: rm+ rn+ n+-
Basic OO: rm+ rn+ n+
Basic regex support: rm+ rn+ n+
Subroutines: rm+ rn+ n+
Blocks: rm+ rn+ n+
Special variables: rm+ (outdated specification) rn+ n+
Constants: rm- rn+- (only literals) n+
State variables: rm- rn- n+

= Classes
Classes, attributes, methods: rm+ rn+ n+
Single inheritance: rm+ rn+ n+
Multiple inheritance: rm+ rn+ n+
Read-only accessors: rm+ rn+ n-
Read-write accessors: rm+ rn+ n+
Default constructor: rm+ rn+ n+
Natively typed attributes: rm- rn+ n-

= Roles
Roles with attributes and methods: rm+ rn+ n+
Composing roles into classes: rm+ rn+ n+- (runtime composition only)
Composing roles into roles: rm+ rn+
Parametric roles: rm+ n+-

= Regexes
Quantifiers, alternations: rm+ rn+ n+
Match objects: rm+ rn+ n+
Named and positional captures: rm+ rn+ n+
Conjunction: rm+ rn+ n-
Longest-Token Matching: rm+- (only for constants) rn- n+
Character classes: rm+- (no backslash escapes) rn+- (no backslash escapes) n+
Unicode properties: rm- rn- n-
Embedded code blocks: rm+ rn- n+
Variable interpolation: rm+- (only scalars) rn- n+- (only scalars)
Grammars: rm+ rn- n+
Matching streams: rm- rn-

= Signatures
Positional args/params: rm+ rn+ n+
Named args/params: rm+ rn+ n+
Slurpy args/params: rm+ rn+ n+
Multi-dimensional params: rm- rn+ n-
Nested signatures: rm+ rn- n-
is rw, is copy: rm+ rn+ n+
Argument coercion: rm+ rn- n-
Type captures: rm+ rn+ n-

= Built-in types and functions
Strings, split, join, case folding, substr: rm+ rn+ n+
Basic numbers, arithmetic operations: rm+ rn+ n+
Big integers: rm- rn- n+
Complex numbers: rm+ rn+ n+
Rat type: rm+  rn+ n+
Hashes, Pairs: rm+ rn+ n+
Lists, arrays, map, grep: rm+ rn+ n+
Lazy lists: rm+ rn+ n+
LoL: rm- rn+- n-
Ranges: rm+ rn+ n+
Sets, KeySet, KeyBag, ...: rn- n-
Buf: rm+ rn- n-
Native operators: rm- rn- n-

= Multi dispatch
Multi method dispatch: rm+ rn+ n+
Multi sub dispatch: rm+ rn+ n+
Protos: rm+- (outdated specification) rn+ n-
Based on arity: rm+ rn+ n+
Based on types: rm+ rn+ n+
Proper narrowness analysis: rm+ rn+ n+- (no subtypes)
Additional constraints: rm+ n-

= Module management
use: rm+- (limited import lists) rn+-(limited import lists) n+- (no import lists)
need:
require: n+- (precompilation required)
Basic module versioning: rm+ rn-

= Meta operators
Reduction: rm+ rn+ n+
Assignment: rm+ rn+ n+
Negation: rm+ rn+ n+
Reverse: rm+ rn+ n+
Zip: rm+- (only two lists) rn+ n+
Cross: rm+- (only two lists) rn+ n+
Hyper: rm+ rn- n+

= Syntax flexibility
Overloading operators: rm+ n+
Defining new operators: rm+ n+
Precedence and associativity of new operators: rm- rn- n+
Basic macros: rm- rn- n-
Hygienic macros: rm- rn- n-

= Concurrency
Basic threads: rm- rn- n+
Synchronization: rm- rn- n+-
Parallelized hyper operators: rm- rn-

= Misc
Junctions, autothreading: rm+ rn+ n+
Whatever-currying: rm+ rn+- n+
REPL: rm+ rn+ n+

= Meta-Object Programming
Introspection: rm+ rn+-
Adding methods: rm+ rn+
Inheritance manipulation:
Role composition:
Feed operators: rm+- rn+-
